{
	"info": {
		"_postman_id": "4b2db082-57c8-4d2e-a14f-fd63bf4d6b72",
		"name": "hw_11",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6784992"
	},
	"item": [
		{
			"name": "hw_11",
			"item": [
				{
					"name": "products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and price\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(product) {",
									"    pm.expect(product).to.have.property('id');",
									"    pm.expect(product).to.have.property('name');",
									"    pm.expect(product).to.have.property('price');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(product) {",
									"    pm.expect(product.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(product) {",
									"        pm.expect(product.price).to.be.a('number');",
									"        pm.expect(product.price).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "products/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Product ID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Product ID should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Name must be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Price is a positive number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.price).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Response contains expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'name', 'price');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/products/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and price\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('price');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.price).to.be.a('number');",
									"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Banana\",\n    \"price\": 25.5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}